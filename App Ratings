CREATE TABLE applestore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4

**EXPLORATORY DATA ANALYSIS**

-- check the number of unique apps in both tablesAppleStore

SELECT COUNT(DISTINCT id) AS Uniqueappids
FROM AppleStore

SELECT COUNT(DISTINCT id) AS Uniqueappids
FROM applestore_description_combined

-- check for any missing values in key fieldsAppleStore

SELECT COUNT(*) AS missingvalues
FROM AppleStore
WHERE track_name is null or user_rating is null or prime_genre is NULL

SELECT COUNT(*) AS missingvalues
FROM applestore_description_combined
WHERE app_desc is null 

-- find out the number of apps per genre

SELECT prime_genre, COUNT (*) AS NumApps
FROM AppleStore
GROUP BY prime_genre
ORDER BY NumApps DESC

-- get an overview of the apps' ratingAppleStore
SELECT min(user_rating) as minrating,
	   max(user_rating) AS maxrating,
       avg(user_rating) AS avgrating
FROM AppleStore

-- get the distribution of app pricesAppleStore
SELECT 
	(price / 2) *2 AS PriceBinStart,
    ((price / 2) *2) +2 AS PriceBinEnd,
    COUNT(*) AS NumApps
FROM AppleStore

GROUP BY PriceBinStart
ORDER BY PriceBinStart


**DATA ANALYSIS**

-- determine whether paids apps have higher ratings than free apps
SELECT CASE
			WHEN price > 0 THEN 'paid'
            else 'free'
         END AS app_type,
         avg(user_rating) AS avg_rating
FROM AppleStore
GROUP BY app_type

-- check genres with low ratings
SELECT prime_genre,
	   avg(user_rating) AS avg_rating
FROM AppleStore
GROUP BY prime_genre
ORDER BY avg_rating ASC
LIMIT 10;

-- check the top rated apps for each genre
SELECT
	prime_genre,
    track_name,
    user_rating
